#!/usr/bin/env bash

# Halt on errors
set -e

# Check dependencies
which wget >/dev/null 2>&1 || ( echo wget missing && exit 1 )
which grep >/dev/null 2>&1 || ( echo grep missing && exit 1 )
which sed >/dev/null 2>&1 || ( echo sed missing && exit 1 )
which cut >/dev/null 2>&1 || ( echo cut missing && exit 1 )

# Function to parse yaml
# https://gist.github.com/epiloque/8cf512c6d64641bde388
# based on https://gist.github.com/pkuczynski/8665367
parse_yaml() {
    local prefix=$2
    local s
    local w
    local fs
    s='[[:space:]]*'
    w='[a-zA-Z0-9_]*'
    fs="$(echo @|tr @ '\034')"
    sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s[:-]$s\(.*\)$s\$|\1$fs\2$fs\3|p" "$1" |
    awk -F"$fs" '{
    indent = length($1)/2;
    vname[indent] = $2;
    for (i in vname) {if (i > indent) {delete vname[i]}}
        if (length($3) > 0) {
            vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
            printf("%s%s%s=(\"%s\")\n", "'"$prefix"'",vn, $2, $3);
        }
    }' | sed 's/_=/+=/g'
}

YAMLFILE=$(readlink -f $1)

# Read yaml file
parse_yaml $YAMLFILE "_"
eval $(parse_yaml $YAMLFILE "_")


if [ ! -z "${_verbose}" ] ; then
  set -x
fi

# Execute multiple script lines together as one
# shell_execute filename key_of_group_of_commands
shell_execute() {
  if [ -f /tmp/recipe_script ] ; then
    rm /tmp/recipe_script
  fi
  parse_yaml $YAMLFILE "_" | grep "^$2+=" > /tmp/recipe_script
  sed -i -e 's|^'$2'+=("||g' /tmp/recipe_script
  sed -i -e 's|")$||g' /tmp/recipe_script
  bash -ex /tmp/recipe_script
  rm /tmp/recipe_script
}

APP=$_app
LOWERAPP=${APP,,}
if [ ! -z $_lowerapp ] ; then
  LOWERAPP=$_lowerapp
fi

mkdir -p ./$APP/$APP.AppDir/usr/lib
cd ./$APP/

if [ -d "./$APP.AppDir/" ] ; then
  rm -rf ./$APP.AppDir/
fi 

if [ ! -e functions.sh ] ; then
  wget -q https://github.com/probonopd/AppImages/raw/master/functions.sh -O ./functions.sh
fi
. ./functions.sh

if [ ! -z "${_ingredients_script[0]}" ] ; then
  # Execute extra steps defined in recipe
  shell_execute $YAMLFILE _ingredients_script
fi

if [ ! -z "${_ingredients_ghreleases[0]}" ] ; then
  for GHREPO in "${_ingredients_ghreleases[@]}" ; do
    wget -q "https://github.com/${GHREPO}/releases/" -O /tmp/gh-release.html
    DEB=$(cat /tmp/gh-release.html | grep ".deb" | grep x86_64 | head -n 1 | cut -d '"' -f 2)
    if [ -z "$DEB" ] ; then
      DEB=$(cat /tmp/gh-release.html | grep ".deb" | grep amd64 | head -n 1 | cut -d '"' -f 2)
    fi
    if [ -z "$DEB" ] ; then
      DEB=$(cat /tmp/gh-release.html | grep ".deb" | grep x64 | head -n 1 | cut -d '"' -f 2)
    fi
    if [ -z "$DEB" ] ; then
      DEB=$(cat /tmp/gh-release.html | grep ".deb" | grep linux64 | head -n 1 | cut -d '"' -f 2)
    fi
    rm /tmp/gh-release.html
    wget -c "https://github.com/${DEB}"
  done
fi

if [ ! -z "${_ingredients_dist}" ] ; then
  generate_status
  if [ -e sources.list ] ; then
    rm sources.list
  fi
  for SOURCE in "${_ingredients_sources[@]}" ; do
    echo "${SOURCE}" >> sources.list
  done
  for PPA in "${_ingredients_ppas[@]}" ; do
    echo "deb http://ppa.launchpad.net/${PPA}/ubuntu ${_ingredients_dist} main" >> sources.list
  done

  # Some projects provide raw .deb files without a repository
  # hence we create our own local repository as part of
  # the AppImage creation process in order to "install"
  # the package using apt-get as normal
  if [ ! -z "${_ingredients_debs[0]}" ] ; then
  which dpkg-scanpackages >/dev/null 2>&1 || ( echo dpkg-scanpackages missing && exit 1 )
    for DEB in "${_ingredients_debs[@]}" ; do
      if [ ! -f $(basename "$DEB") ] ; then
        wget -c $DEB
      fi
    done
  fi
  dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz
  echo "deb file:$(readlink -e $PWD) ./" >> sources.list

  INSTALL=$LOWERAPP
  if [ ! -z "${_ingredients_package}" ] ; then
    INSTALL="${_ingredients_package}"
  fi

  apt-get $OPTIONS update || true
  URLS=$(apt-get $OPTIONS -y install --print-uris "$INSTALL" | cut -d "'" -f 2 | grep -e "^http")
  for URL in $URLS ; do
    if [ ! -f $(basename "$URL") ] ; then
      wget -c $URL
    fi
  done
fi

mkdir -p ./$APP.AppDir/
cd ./$APP.AppDir/

mkdir -p usr/bin usr/lib
find ../*.deb -exec dpkg -x {} . \; || true

get_icon
get_apprun
get_desktop || true

if [ -d "./usr/lib/x86_64-linux-gnu/gstreamer-1.0/" ] ; then
  mv ./usr/lib/x86_64-linux-gnu/gstreamer-1.0/* ./usr/lib/x86_64-linux-gnu/
  rm -r ./usr/lib/x86_64-linux-gnu/gstreamer-1.0
fi

if [ -d "./usr/lib/x86_64-linux-gnu/pulseaudio/" ] ; then
  mv ./usr/lib/x86_64-linux-gnu/pulseaudio/* ./usr/lib/x86_64-linux-gnu/
  rm -r ./usr/lib/x86_64-linux-gnu/pulseaudio
fi

# Execute extra steps defined in recipe
if [ ! -z "${_script}" ] ; then
  shell_execute $YAMLFILE _script
fi

# Compile GLib schemas if the subdirectory is present in the AppImage
# AppRun has to export GSETTINGS_SCHEMA_DIR for this to work
if [ -d usr/share/glib-2.0/schemas/ ] ; then
  ( cd usr/share/glib-2.0/schemas/ ; glib-compile-schemas . )
fi

if [ -f ../VERSION ] ; then
  VERSION=$(cat ../VERSION).glibc$(glibc_needed)
else
  get_version || true
fi

# patch_usr
# Patching only the executable files seems not to be enough for some apps
# find usr/ -type f -exec sed -i -e 's|/usr|././|g' {} \;

delete_blacklisted
get_desktopintegration $LOWERAPP

# Execute extra steps defined in recipe
if [ ! -z "${_post}" ] ; then
  shell_execute $YAMLFILE _post
fi

# Go out of AppImage
cd ..

generate_type2_appimage
ls -lh ../out/*.AppImage
