# To get the payload files out of the Qt installer is somewhat tricky but doable as can be seen below

APP=QtCreator
LOWERAPP=${APP,,} 

mkdir -p ./$APP/$APP.AppDir/usr/bin
cd ./$APP

wget -q https://github.com/probonopd/AppImages/raw/master/functions.sh -O ./functions.sh
. ./functions.sh

# Pick best mirror (Travis CI can then download this in 9 seconds)
URL=$(wget -q "http://download.qt.io/official_releases/qt/5.7/5.7.0/qt-opensource-linux-x64-5.7.0.run.mirrorlist" -O - | grep "run<" | head -n 2 | tail -n 1 | cut -d '"' -f 2)
wget -c "$URL"

cat > extract-qt-installer <<\EOoF
#!/bin/bash

if [ $# -lt 2 ];
then
    echo extract-qt-installer qt-installer output_path
    exit -1
fi

export PATH=$PATH:$PWD
export WORKDIR=$PWD
INSTALLER=$1
OUTPUT=$2
SCRIPT="$(mktemp)"

cat <<EOF > $SCRIPT
// Unattentended install script for Qt
// Based on http://stackoverflow.com/questions/25105269/silent-install-qt-run-installer-on-ubuntu-server

function Controller() {
    installer.autoRejectMessageBoxes();
    installer.installationFinished.connect(function() {
        gui.clickButton(buttons.NextButton);
    })
}

Controller.prototype.WelcomePageCallback = function() {
    gui.clickButton(buttons.NextButton);
}

Controller.prototype.CredentialsPageCallback = function() {
    gui.clickButton(buttons.NextButton);
}

Controller.prototype.IntroductionPageCallback = function() {
    gui.clickButton(buttons.NextButton);
}

Controller.prototype.TargetDirectoryPageCallback = function()
{
    gui.currentPageWidget().TargetDirectoryLineEdit.setText("$OUTPUT");
    gui.clickButton(buttons.NextButton);
}

Controller.prototype.ComponentSelectionPageCallback = function() {
    var widget = gui.currentPageWidget();
    gui.clickButton(buttons.NextButton);
}

Controller.prototype.LicenseAgreementPageCallback = function() {
    gui.currentPageWidget().AcceptLicenseRadioButton.setChecked(true);
    gui.clickButton(buttons.NextButton);
}

Controller.prototype.StartMenuDirectoryPageCallback = function() {
    gui.clickButton(buttons.NextButton);
}

Controller.prototype.ReadyForInstallationPageCallback = function()
{
    gui.clickButton(buttons.NextButton);
}

Controller.prototype.FinishedPageCallback = function() {
var checkBoxForm = gui.currentPageWidget().LaunchQtCreatorCheckBoxForm
if (checkBoxForm && checkBoxForm.launchQtCreatorCheckBox) {
    checkBoxForm.launchQtCreatorCheckBox.checked = false;
}
    gui.clickButton(buttons.FinishButton);
}
EOF

chmod u+x $1
$1 --script $SCRIPT -platform minimal
# Qt bug? Says "Unknown option: p, l, a, t, f, o, r, m" but it actually works; does not need an X server this way
EOoF

chmod a+x *

TARGETDIR=$(readlink -e ./*.run | sed -e 's|.run||g')
mkdir -p "$TARGETDIR"

./extract-qt-installer ./*.run "$TARGETDIR/"

# Since unchecking options in the installer might break in newer Qt versions
# due to changing component names, we simply install the default set and now
# delete what we don't want. Not elegant but more robust.
# Qt Installer should really provide a sane CLI.
rm -rf $TARGETDIR/{Docs,Examples,MaintenanceTool,MaintenanceTool.dat,MaintenanceTool.ini}

ls -lh "$TARGETDIR/"

# The Qt Creator installer does not install a compiler
# so we do in order to have a fully working out-of-the-box experience

generate_status
cat > status<<\EOF
Package: apt-transport-https
Status: install ok installed
Architecture: all
Version: 9:9999.9999.9999

Package: debconf
Status: install ok installed
Architecture: all
Version: 9:9999.9999.9999

Package: dictionaries-common
Status: install ok installed
Architecture: all
Version: 9:9999.9999.9999

Package: dpkg
Status: install ok installed
Architecture: all
Version: 9:9999.9999.9999

Package: libc6
Status: install ok installed
Architecture: all
Version: 2.13-38+deb7u10

Package: libstdc++6
Status: install ok installed
Architecture: all
Version: 9:9999.9999.9999
EOF
echo "deb http://ftp.de.debian.org/debian/ wheezy main
deb http://ftp.debian.org/debian wheezy-backports main
" > sources.list
apt-get $OPTIONS update
URLS=$(apt-get $OPTIONS -y install --print-uris g++ libgl1-mesa-dev | cut -d "'" -f 2 | grep -e "^http")
wget -c $URLS

cd ./$APP.AppDir/

find ../*.deb -exec dpkg -x {} . \; || true

mv $TARGETDIR/* .

( cd usr/bin ; ln -s ../../Tools/QtCreator/bin/qtcreator.sh qtcreator )

# Ubuntu puts this in another location than where QtCreator expects it
mkdir -p usr/lib
( cd usr/lib ; ln -s /usr/lib/x86_64-linux-gnu/mesa/libGL.so.1 . )
( cd usr/lib ; ln -s /usr/lib/x86_64-linux-gnu/mesa-egl/libEGL.so.1 . )

cp $HOME/.local/share/icons/hicolor/512x512/apps/QtProject-qtcreator.png .
cp $HOME/.local/share/applications/*-community.desktop $LOWERAPP.desktop
sed -i -e 's|^Exec=.*|Exec=qtcreator|g' $LOWERAPP.desktop
sed -i -e 's|^Name=.*|Name=QtCreator|g' $LOWERAPP.desktop

get_desktopintegration $LOWERAPP

VERSION=$(ls ../*.run | cut -d "-" -f 5 | sed -e 's|.run||g')
ARCH=$(arch)

# Qt Creator installer has placed hardcoded absolute paths to the installation location into the AppImgae
# which we need to patch away
find . -type f -not -executable -exec sed -i -e 's|/home/travis/build/probonopd/AppImages/QtCreator/qt-opensource-linux-x64-5.7.0|/tmp/.mount_QtCreator-5.7.0-x86_64|g' {} \;

# Since the AppImage mountpoint changes on each execution, we use a workaround

cat > AppRun <<\EOF
#!/bin/bash

LINK="/tmp/.mount_QtCreator-5.7.0-x86_64"

# QtCreator uses hardcoded paths. Hence we are using this workaround. At AppImage creation time, did:
# find . -type f -not -executable -exec sed -i -e 's|/home/travis/build/probonopd/AppImages/QtCreator/qt-opensource-linux-x64-5.7.0|/tmp/.mount_QtCreator-5.7.0-x86_64|g' {} \;

HERE="$(dirname "$(readlink -f "${0}")")"

export PATH=$LINK/5.7/gcc_64/plugins/usr/bin/:$LINK/bin/:$PATH
export LD_LIBRARY_PATH=$LINK/usr/lib/x86_64-linux-gnu:$LINK/lib/x86_64-linux-gnu:$LINK/usr/lib/:$LINK/lib/:$LD_LIBRARY_PATH
export QT_PLUGIN_PATH=$LINK/5.7/gcc_64/plugins:$QT_PLUGIN_PATH

if [ -L "$LINK" ] ; then
  echo "QtCreator seems to be already running or there is a leftover $LINK file; delete it and try again"
  exit 1
fi

trap atexit EXIT
atexit()
{
  rm "$LINK"
}

if [ "" == "$APPDIR" ] ; then
  ln -s  "$HERE" "$LINK"
  "$LINK"/usr/bin/qtcreator "$@"
  exit $?
fi

ln -s  "$APPDIR" "$LINK"
"$LINK"/usr/bin/qtcreator "$@"
exit $?
EOF
chmod a+x AppRun

# Actually the Qt installer ships 2 different sets of Qt libraries which is quite a waste
# and AppImage size grows over 250 MB. So we deduplicate them
( cd Tools/QtCreator/ ; cp -Rv libold/ lib/ ; ln -s ../../*/gcc_64/lib . ; cp -Rv libold/* lib/ ; rm -rf libold/ )

# Go out of AppImage
cd ..

generate_appimage
