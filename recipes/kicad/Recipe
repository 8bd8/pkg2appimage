# This is an example for using debian backports

wget -q https://github.com/probonopd/AppImages/raw/master/functions.sh -O ./functions.sh
. ./functions.sh

TITLE=KiCad
APP=${TITLE,,}

sudo add-apt-repository -y ppa:js-reynaud/ppa-kicad
sudo apt-get update

sudo apt-get -y install $APP

# sudo bash -c 'echo "deb http://ftp.debian.org/debian wheezy-backports main" >> /etc/apt/sources.list.d/wheezy-backports.list'
# sudo apt-get update
# sudo apt-get -y --force-yes install -t wheezy-backports kicad

mkdir -p $APP/$APP.AppDir
cd $APP/$APP.AppDir
find /var/cache/apt/archives/libwx* -exec dpkg -x {} . \;
find /var/cache/apt/archives/*$APP* -exec dpkg -x {} . \; || true

# Copy in the indirect dependencies
copy_deps ; copy_deps ; copy_deps # Three runs to ensure we catch indirect ones

cp ./usr/share/applications/kicad.desktop .
cp ./usr/share/icons/hicolor/48x48/apps/kicad.png .

patch_usr

# Workaround until 
# AppRun.c exports rather than just sets environment variables
cat > ./AppRun <<\EOF
#!/bin/sh
HERE="$(dirname "$(readlink -f "${0}")")"
export LD_LIBRARY_PATH="${HERE}/usr/lib/x86_64-linux-gnu":"${HERE}/usr/lib/"
cd "${HERE}/usr"
exec "./bin/kicad" "$@"
EOF
chmod a+x ./AppRun

# The following lines can be removed once AppRun covers these paths, too
mv lib/x86_64-linux-gnu/* usr/lib/x86_64-linux-gnu/ || true
mv lib/* usr/lib/ || true

delete_blacklisted

VER1=$(ls /var/cache/apt/archives/kicad_* | cut -d "_" -f 2 | cut -d "-" -f 1)
GLIBC_NEEDED=$(glibc_needed)
VERSION=$VER1.glibc$GLIBC_NEEDED
echo $VERSION

get_desktopintegration kicad

# Go out of AppImage
cd ..

ARCH="x86_64"
generate_appimage
